"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var _require = require("./utils/file"),
    fileName = _require.fileName,
    filePath = _require.filePath;

var DISCLAIMER = "/**\n * THIS FILE IS AUTOGENERATED ON EACH BUILD\n * DO NOT CHANGE THE CONTENTS OF THIS FILE\n * CHANGES MADE IN THIS FILE WILL BE OVERWRITTEN DURING THE NEXT BUILD\n */";

var HEADING = function HEADING(file) {
  var heading = "/**\n * ".concat(fileName(file).toUpperCase(), "\n */");
  return heading;
};

var parseExportable = function parseExportable(exportable, file) {
  switch (exportable) {
    case "default":
      return "\tdefault as ".concat(fileName(file), "Defaults,");

    default:
      return "\t".concat(exportable, ",");
  }
};

module.exports.createIndex = function (exportables, dir) {
  return [DISCLAIMER, "\n\n"].concat(_toConsumableArray(exportables.map(function (_ref) {
    var file = _ref.file,
        matches = _ref.matches;
    var src = filePath(file, dir);
    return [HEADING(file), "export {"].concat(_toConsumableArray(matches.map(function (match) {
      return parseExportable(match, file);
    })), ["} from './".concat(src, "';"), "\n"]).join("\n");
  }))).join("");
};